{"version":3,"file":"static/js/836.a6bf80c3.chunk.js","mappings":"mRAGaA,EAAcC,EAAAA,EAAAA,IAAH,6CAIXC,GAAoBD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,6FAMjBG,GAAgBH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,iZAkBbK,GAAgBL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,kKAUbO,EAAgBP,EAAAA,EAAAA,MAAH,qHAObQ,EAAuBR,EAAAA,EAAAA,OAAH,2b,6BChC3BS,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,MAAM,IAC1BC,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,aAGnBI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,KAE1BC,EAAAA,EAAAA,YAAU,WAER,OADAL,GAASM,EAAAA,EAAAA,IAAoBJ,IACtB,WACLF,GAASM,EAAAA,EAAAA,IAAoB,MAC9B,CACF,IAUD,OACE,SAACzB,EAAD,WACE,SAAC,KAAD,CACE0B,cAAe,CAAEX,MAAO,GAAIC,SAAU,GAAIH,KAAM,IAChDc,SAZe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BV,GAASW,EAAAA,EAAAA,IAASF,IAEJ,OAAVP,GACFQ,GAEH,EAOKE,iBAAkBrB,EAHpB,UAKE,UAACR,EAAD,CAAmB8B,aAAa,MAAhC,WACE,SAACxB,EAAD,CAAeyB,QAAQ,QAAvB,qBACA,SAAC7B,EAAD,CACE8B,KAAK,QACLrB,KAAK,QACLsB,YAAY,4BACZrB,UAAQ,KAEV,SAACR,EAAD,CAAeO,KAAK,QAAQuB,UAAU,SAEtC,SAAC5B,EAAD,CAAeyB,QAAQ,WAAvB,uBACA,SAAC7B,EAAD,CACE8B,KAAK,WACLrB,KAAK,WACLsB,YAAY,8BACZrB,UAAQ,KAEV,SAACR,EAAD,CAAeO,KAAK,WAAWuB,UAAU,SAEzC,SAAC5B,EAAD,CAAeyB,QAAQ,OAAvB,mBACA,SAAC7B,EAAD,CACE8B,KAAK,OACLrB,KAAK,OACLsB,YAAY,0BACZrB,UAAQ,KAEV,SAACR,EAAD,CAAeO,KAAK,OAAOuB,UAAU,SACrC,SAAC3B,EAAD,CAAsByB,KAAK,SAA3B,4BAKT,EC9Ec,SAASG,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACpB,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const Fromwrapper = styled.div`\n  margin-top: 55px;\n`;\n\nexport const FormRegisterWrapp = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const InputRegister = styled(Field)`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  font-weight: 700;\n  border: 1px solid var(--text-color);\n  color: var(--text-color);\n  transition: color 500ms linear, background-color 500ms linear;\n  &:hover,\n  &:focus {\n    background-color: tomato;\n    border: 2px solid var(--text-color);\n  }\n`;\n\nexport const ErrorRegister = styled(ErrorMessage)`\n  display: flex;\n  width: 300px;\n  text-align: center;\n  color: red;\n  margin-bottom: 15px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nexport const LabelRegister = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: var(--text-color);\n`;\n\nexport const SubmitButtonRegister = styled.button`\n  width: 150px;\n  height: 40px;\n  background-color: var(--background-color);\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  border: 1px solid var(--text-color);\n  color: var(--text-color);\n  transition: color 500ms linear, background-color 500ms linear;\n  &:hover,\n  &:focus {\n    background-color: tomato;\n    border: 2px solid var(--text-color);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { register } from '../redux/auth/operations';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormRegisterWrapp,\n  InputRegister,\n  ErrorRegister,\n  LabelRegister,\n  SubmitButtonRegister,\n  Fromwrapper,\n} from 'components/RegisterForm/RegisterForm.styled';\nimport { selectRegisterError } from '../redux/auth/selectors';\nimport { updateErrorRegister } from '../redux/auth/authSlice';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email(''),\n  password: yup.string().min(6).required(),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectRegisterError);\n\n  useEffect(() => {\n    dispatch(updateErrorRegister(error));\n    return () => {\n      dispatch(updateErrorRegister(null));\n    };\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n\n    if (error !== null) {\n      resetForm();\n    }\n  };\n\n  return (\n    <Fromwrapper>\n      <Formik\n        initialValues={{ email: '', password: '', name: '' }}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <FormRegisterWrapp autoComplete=\"off\">\n          <LabelRegister htmlFor=\"email\">E-mail</LabelRegister>\n          <InputRegister\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Please, enter your E-mail\"\n            required\n          />\n          <ErrorRegister name=\"email\" component=\"div\" />\n\n          <LabelRegister htmlFor=\"password\">Password</LabelRegister>\n          <InputRegister\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Please, enter your Password\"\n            required\n          />\n          <ErrorRegister name=\"password\" component=\"div\" />\n\n          <LabelRegister htmlFor=\"name\">Name</LabelRegister>\n          <InputRegister\n            type=\"name\"\n            name=\"name\"\n            placeholder=\"Please, enter your Name\"\n            required\n          />\n          <ErrorRegister name=\"name\" component=\"div\" />\n          <SubmitButtonRegister type=\"submit\">Register</SubmitButtonRegister>\n        </FormRegisterWrapp>\n      </Formik>\n    </Fromwrapper>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["Fromwrapper","styled","FormRegisterWrapp","Form","InputRegister","Field","ErrorRegister","ErrorMessage","LabelRegister","SubmitButtonRegister","schema","yup","shape","name","required","email","password","min","RegisterForm","dispatch","useDispatch","error","useSelector","selectRegisterError","useEffect","updateErrorRegister","initialValues","onSubmit","values","resetForm","register","validationSchema","autoComplete","htmlFor","type","placeholder","component","Register","Helmet"],"sourceRoot":""}