{"version":3,"file":"static/js/18.1dd5063a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/App.styled.jsx","components/FilterField/Filter.styled.jsx","components/FilterField/Filter.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormWrapp = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  outline-color: #9582ee;\n  border-color: #624ec1;\n  font-weight: 700;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  display: flex;\n  width: 300px;\n  text-align: center;\n  color: red;\n  margin-bottom: 15px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n\nexport const Label = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #cfbed9;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  height: 40px;\n  background-color: #ceaadb;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  outline-color: #533f63;\n`;\n","export const selectLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectAllContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  FormWrapp,\n  Input,\n  Error,\n  Label,\n  SubmitButton,\n} from 'components/ContactForm/ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../redux/contacts/operations';\nimport { selectAllContacts } from '../redux/contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .min(4)\n    .max(12)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n\n    const { name, number } = values;\n\n    const contact = {\n      name,\n      number,\n    };\n\n    const dublicateContact = findDublicateContact(contact, contacts);\n\n    dublicateContact\n      ? alert(`${contact.name} is already in contacts`)\n      : dispatch(addContact(values));\n  };\n\n  const findDublicateContact = (contact, contacts) => {\n    return contacts.find(\n      item => item.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormWrapp autoComplete=\"off\">\n        <Label htmlFor=\"number\">Number</Label>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Please, enter your Number\"\n          required\n        />\n        <Error name=\"number\" component=\"div\" />\n\n        <Label htmlFor=\"name\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Please, enter your Name\"\n          required\n        />\n        <Error name=\"name\" component=\"div\" />\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </FormWrapp>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n","import styled from '@emotion/styled';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  outline-color: #9582ee;\n  border-color: #624ec1;\n  font-weight: 700;\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #cfbed9;\n`;\n","import {\n  FilterWrap,\n  FilterInput,\n  FilterLabel,\n} from 'components/FilterField/Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../redux/contacts/selectors';\nimport { filterChange } from '../redux/contacts/contactsSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  console.log(filter);\n\n  const onFilterChange = e => {\n    dispatch(filterChange(e.currentTarget.value));\n  };\n  return (\n    <FilterWrap>\n      <FilterLabel htmlFor=\"text\">Find contacts by name</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange}\n      />\n    </FilterWrap>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListMarkup = styled.ul`\n  width: 1370px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  list-style: none;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 140px;\n  height: 150px;\n  border: 1px solid #6f21a0;\n  padding: 10px;\n  text-align: center;\n  border-radius: 5px;\n`;\n\nexport const ContactListHeader = styled.h2`\n  margin: 0;\n  margin-bottom: auto;\n  color: #cfbed9;\n`;\n\nexport const ContactListText = styled.p`\n  margin: 0;\n  font-weight: 600;\n  color: #cfbed9;\n`;\n\nexport const ContactListButton = styled.button`\n  width: 100px;\n  background-color: #9582ee;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  margin-top: auto;\n  padding: 5px;\n`;\n","import {\n  ContactListMarkup,\n  ContactListItem,\n  ContactListHeader,\n  ContactListText,\n  ContactListButton,\n} from 'components/ContactsList/ContactsList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../redux/contacts/operations';\nimport { selectFilter, selectAllContacts } from '../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  // const { contacts, filter } = useSelector(getContacts, getFilter);\n  const items = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  console.log(filter);\n\n  const getRequiredCard = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteCard = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n  const neeedCard = getRequiredCard();\n  return (\n    <ContactListMarkup>\n      {neeedCard.map(({ name, number, id }) => {\n        return (\n          <ContactListItem key={id}>\n            <ContactListHeader>{name}</ContactListHeader>\n            <ContactListText>{number}</ContactListText>\n            <ContactListButton type=\"button\" onClick={() => deleteCard(id)}>\n              Delete\n            </ContactListButton>\n          </ContactListItem>\n        );\n      })}\n    </ContactListMarkup>\n  );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Container } from '../components/App.styled';\nimport { Filter } from 'components/FilterField/Filter';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectError,\n  selectLoading,\n} from '../components/redux/contacts/selectors';\nimport { fetchContact } from '../components/redux/contacts/operations';\nimport { Loader } from '../components/Loader/Loader';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>PhoneBook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && !error && <Loader />}\n    </Container>\n  );\n}\n"],"names":["FormWrapp","styled","Form","Input","Field","Error","ErrorMessage","Label","SubmitButton","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","selectError","error","schema","yup","shape","name","matches","required","number","min","max","initialValues","ContactForm","dispatch","useDispatch","useSelector","findDublicateContact","contact","find","item","toLowerCase","onSubmit","values","resetForm","alert","addContact","validationSchema","autoComplete","htmlFor","type","placeholder","component","Container","FilterWrap","FilterInput","FilterLabel","Filter","console","log","value","onChange","e","filterChange","currentTarget","ContactListMarkup","ContactListItem","ContactListHeader","ContactListText","ContactListButton","ContactList","neeedCard","normalizedFilter","includes","getRequiredCard","map","id","onClick","contactId","deleteContact","Contacts","useEffect","fetchContact","Loader"],"sourceRoot":""}